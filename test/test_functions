#!/bin/sh
################################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Adam C Hobaugh
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
###############################################################################

#
# This file contains the utitility fuctions used in the test script
#

#Set colors needed for easy use
RED='\e[0;31m'
GREEN='\e[0;32m'
NC='\e[0m' #No color

#start_test - Prints out what test we are on and increments the test counter
#  Inputs:
#    $1 - Test name
#  Returns:
#    None
start_test()
{
  echo "$1 Test"
  TESTS=`expr $TESTS + 1`
}

#passed - Output passed assert and increment the passed counter
#  Inputs:
#    $1 - The assert that passed
#    $2 - The value the assert tested
#  Returns:
#    None
passed()
{
  [ ! $MODE = "failed" ] && echo -e "${GREEN}PASSED: $1 $2${NC}"
  PASSED=`expr $PASSED + 1`
}

#failed - Output failed assert and increment the failed counter
#  Inputs:
#    $1 - The assert that passed
#    $2 - The value the assert tested
#  Returns:
#    None
failed()
{
  [ ! $MODE = "passed" ] && echo -e "${RED}FAILED: $1 $2${NC}"
  FAILED=`expr $FAILED + 1`
}

#assert_exists - Assert that the journal.txt file exists
#  Inputs:
#    None
#  Returns:
#    None
assert_exists()
{
  if [ ! -f journal.txt ]; then 
    failed "assert_exists"
  else
    passed "assert_exists"
  fi
}

#assert_not_exists - Assert that the journal.txt file does not exist
#  Inputs:
#    None
#  Returns:
#    None
assert_not_exists()
{
  if [ -f journal.txt ]; then
    failed "assert_not_exists"
  else
    passed "assert_not_exists"
  fi
}

#assert_contains - Convenience function for journal.txt file
#  Inputs:
#    $1 - Value to test
#  Returns:
#    None
assert_contains()
{
  assert_file_contains journal.txt "$1"
}

#assert_file_contains - Assert that file contains value
#  Inputs:
#    $1 - File to look in
#    $2 - Value to look for
#  Returns:
#    None
assert_file_contains()
{
  grep "$2" "$1" > /dev/null
  if [ $? -eq 1 ]; then
    failed "assert_file_contains" "$1:$2"
  else
    passed "assert_file_contains" "$1:$2"
  fi
}

#assert_not_contains - Convenience function for journal.txt file
#  Inputs:
#    $1 - Value to test
#  Returns:
#    None
assert_not_contains()
{
  assert_file_not_contains journal.txt "$1"
}

#assert_file_not_contains - Assert that file does not contain value
#  Inputs:
#    $1 - File to look in
#    $2 - Value to look for
#  Returns:
#    None
assert_file_not_contains()
{
  grep "$2" "$1" > /dev/null
  if [ $? -eq 0 ]; then
    failed "assert_file_not_contains" "$1:$2"
  else
    passed "assert_file_not_contains" "$1:$2"
  fi
}

#assert_contains_on_line - Assert that value occurs on line in journal.txt
#  Inputs:
#    $1 - Value to look for
#    $2 - Line that value should exist on
#  Returns:
#    None
assert_contains_on_line()
{
  grep --line-number "$1" journal.txt | grep "$2:$1" > /dev/null
  if [ $? -eq 1 ]; then
    failed "assert_contains_on_line" "$2:$1"
  else
    passed "assert_contains_on_line" "$2:$1"
  fi
}

#assert_count - Assert that count is equal to desired
#  Inputs:
#    $1 - The count we want to test
#    $2 - The desired amount we are testing against
#  Returns:
#    None
assert_count()
{
  if [ $1 -ne $2 ]; then
    failed "assert_count" $2  
  else
    passed "assert_count" $2  
  fi
}

#print_totals - Prints the totals for the tests and asserts run
#  Inputs:
#    None
#  Returns:
#    None
print_totals()
{
  echo "TESTS: $TESTS"
  echo "ASSERTS: PASSED $PASSED FAILED $FAILED"
}
