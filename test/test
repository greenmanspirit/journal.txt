#!/bin/sh
################################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Adam C Hobaugh
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################

#Test if we were given a mode and set accordingly
if [ -z "$1" ]; then
  #Default value if nothing given
  MODE="both"
else
  #Set mode to what was given
  if [ $1 = "passed" -o $1 = "failed" -o $1 = "both" ]; then
    MODE=$1
  else
    echo "Unknown mode $1"
    echo "Valid modes are passed, failed, and both (no mode defaults to this)"
    exit 1
  fi
fi

#Find out where we are so I can edit the path and home
ABSOLUTE_SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$ABSOLUTE_SCRIPT_PATH")
#Edit the path so that the test vim and emacs are used
export PATH=$SCRIPT_DIR:$PATH
export HOME=$SCRIPT_DIR/home

#Make our testing home directory
mkdir $HOME

#Set the user environment variable to test for journal.rb
export USER="test"

#Bring in all the of test functions
. ./test_functions

#
# Begin Tests
#

#Test format
#  start_test with the name of the test
#  [optional] remove journal.txt
#  [optional] prepare journal.txt
#  [optional] prepare any extra variables needed for the test
#  [optional] export VALUE to be used by the test vim
#  ../journal, if stdin is needed for something in journal, ie a question, echo
#    it and pipe it into journal. Can also capture output if it needs tested.
#  [optional] process output
#  as many asserts as needed

#Used in the tests
ENTRY1V="Entry 1"
ENTRY2V="Entry 2"
ENTRY3V="Entry 3"
ENTRY1D="01/02/14"
ENTRY2D="01/01/14"
ENTRY3D="12/31/13"
ENTRY1="ENTRYSTART
ENTRYDATE $ENTRY1D
$ENTRY1V
ENTRYEND"
ENTRY2="ENTRYSTART
ENTRYDATE $ENTRY2D
$ENTRY2V
ENTRYEND"
ENTRY3="ENTRYSTART
ENTRYDATE $ENTRY3D
$ENTRY3V
ENTRYEND"

JOURNALRC="EDITOR=vim
FILEDIR=$HOME"

if [ ! -z "$2" ]; then
  if [ -f ${2}_test.sh ]; then
    . ${2}_test.sh
  else
    echo "No tests for $2"
  fi
else
  for TEST in *_test.sh
  do
    . $TEST
  done
fi

#Print out the total tests, passes and fails
print_totals

#Cleanup
[ -f output ] && rm output
[ -d $HOME ] && rm -rf $HOME
